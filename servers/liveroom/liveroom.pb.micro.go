// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: liveroom.proto

package liveroom

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for LiveRoom service

func NewLiveRoomEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for LiveRoom service

type LiveRoomService interface {
	// 在聊天室里，发送消息
	Send(ctx context.Context, in *SendReq, opts ...client.CallOption) (*SendRes, error)
	// 收取聊天室里的未读消息
	Recv(ctx context.Context, in *RecvReq, opts ...client.CallOption) (*RecvRes, error)
}

type liveRoomService struct {
	c    client.Client
	name string
}

func NewLiveRoomService(name string, c client.Client) LiveRoomService {
	return &liveRoomService{
		c:    c,
		name: name,
	}
}

func (c *liveRoomService) Send(ctx context.Context, in *SendReq, opts ...client.CallOption) (*SendRes, error) {
	req := c.c.NewRequest(c.name, "LiveRoom.Send", in)
	out := new(SendRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveRoomService) Recv(ctx context.Context, in *RecvReq, opts ...client.CallOption) (*RecvRes, error) {
	req := c.c.NewRequest(c.name, "LiveRoom.Recv", in)
	out := new(RecvRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LiveRoom service

type LiveRoomHandler interface {
	// 在聊天室里，发送消息
	Send(context.Context, *SendReq, *SendRes) error
	// 收取聊天室里的未读消息
	Recv(context.Context, *RecvReq, *RecvRes) error
}

func RegisterLiveRoomHandler(s server.Server, hdlr LiveRoomHandler, opts ...server.HandlerOption) error {
	type liveRoom interface {
		Send(ctx context.Context, in *SendReq, out *SendRes) error
		Recv(ctx context.Context, in *RecvReq, out *RecvRes) error
	}
	type LiveRoom struct {
		liveRoom
	}
	h := &liveRoomHandler{hdlr}
	return s.Handle(s.NewHandler(&LiveRoom{h}, opts...))
}

type liveRoomHandler struct {
	LiveRoomHandler
}

func (h *liveRoomHandler) Send(ctx context.Context, in *SendReq, out *SendRes) error {
	return h.LiveRoomHandler.Send(ctx, in, out)
}

func (h *liveRoomHandler) Recv(ctx context.Context, in *RecvReq, out *RecvRes) error {
	return h.LiveRoomHandler.Recv(ctx, in, out)
}
