// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: liveroom.proto

package liveroom

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Room service

func NewRoomEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Room service

type RoomService interface {
	// 进入聊天室
	Enter(ctx context.Context, in *EnterReq, opts ...client.CallOption) (*EnterRes, error)
	// 在聊天室里，发送消息
	Send(ctx context.Context, in *SendReq, opts ...client.CallOption) (*SendRes, error)
	// 收取聊天室里的未读消息。
	// 这是一个 long-polling 机制的方法，需要指定 `Request-Timeout` 头，
	// 表示当聊天室里没有未读消息时，轮询多少秒。当聊天室里有未读消息时，立刻返回。
	Recv(ctx context.Context, in *RecvReq, opts ...client.CallOption) (*RecvRes, error)
	// 退出聊天室
	Leave(ctx context.Context, in *LeaveReq, opts ...client.CallOption) (*LeaveRes, error)
}

type roomService struct {
	c    client.Client
	name string
}

func NewRoomService(name string, c client.Client) RoomService {
	return &roomService{
		c:    c,
		name: name,
	}
}

func (c *roomService) Enter(ctx context.Context, in *EnterReq, opts ...client.CallOption) (*EnterRes, error) {
	req := c.c.NewRequest(c.name, "Room.Enter", in)
	out := new(EnterRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomService) Send(ctx context.Context, in *SendReq, opts ...client.CallOption) (*SendRes, error) {
	req := c.c.NewRequest(c.name, "Room.Send", in)
	out := new(SendRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomService) Recv(ctx context.Context, in *RecvReq, opts ...client.CallOption) (*RecvRes, error) {
	req := c.c.NewRequest(c.name, "Room.Recv", in)
	out := new(RecvRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomService) Leave(ctx context.Context, in *LeaveReq, opts ...client.CallOption) (*LeaveRes, error) {
	req := c.c.NewRequest(c.name, "Room.Leave", in)
	out := new(LeaveRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Room service

type RoomHandler interface {
	// 进入聊天室
	Enter(context.Context, *EnterReq, *EnterRes) error
	// 在聊天室里，发送消息
	Send(context.Context, *SendReq, *SendRes) error
	// 收取聊天室里的未读消息。
	// 这是一个 long-polling 机制的方法，需要指定 `Request-Timeout` 头，
	// 表示当聊天室里没有未读消息时，轮询多少秒。当聊天室里有未读消息时，立刻返回。
	Recv(context.Context, *RecvReq, *RecvRes) error
	// 退出聊天室
	Leave(context.Context, *LeaveReq, *LeaveRes) error
}

func RegisterRoomHandler(s server.Server, hdlr RoomHandler, opts ...server.HandlerOption) error {
	type room interface {
		Enter(ctx context.Context, in *EnterReq, out *EnterRes) error
		Send(ctx context.Context, in *SendReq, out *SendRes) error
		Recv(ctx context.Context, in *RecvReq, out *RecvRes) error
		Leave(ctx context.Context, in *LeaveReq, out *LeaveRes) error
	}
	type Room struct {
		room
	}
	h := &roomHandler{hdlr}
	return s.Handle(s.NewHandler(&Room{h}, opts...))
}

type roomHandler struct {
	RoomHandler
}

func (h *roomHandler) Enter(ctx context.Context, in *EnterReq, out *EnterRes) error {
	return h.RoomHandler.Enter(ctx, in, out)
}

func (h *roomHandler) Send(ctx context.Context, in *SendReq, out *SendRes) error {
	return h.RoomHandler.Send(ctx, in, out)
}

func (h *roomHandler) Recv(ctx context.Context, in *RecvReq, out *RecvRes) error {
	return h.RoomHandler.Recv(ctx, in, out)
}

func (h *roomHandler) Leave(ctx context.Context, in *LeaveReq, out *LeaveRes) error {
	return h.RoomHandler.Leave(ctx, in, out)
}
