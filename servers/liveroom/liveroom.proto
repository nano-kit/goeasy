syntax = "proto3";

package liveroom;

// 聊天室服务
service Room {
    // 进入聊天室
    rpc Enter(EnterReq) returns (EnterRes);
    // 在聊天室里，发送消息
    rpc Send(SendReq) returns (SendRes);
    // 收取聊天室里的未读消息。
    // 这是一个 long-polling 机制的方法，需要指定 `Request-Timeout` 头，
    // 表示当聊天室里没有未读消息时，轮询多少秒。当聊天室里有未读消息时，立刻返回。
    rpc Recv(RecvReq) returns (RecvRes);
    // 退出聊天室
    rpc Leave(LeaveReq) returns (LeaveRes);
}

message EnterReq {
    string room = 1; // 聊天室ID
    MsgEnterRoom info = 2; // 附加信息
}

message EnterRes {
    repeated string uids = 1; // 聊天室里在线的人列表
}

message LeaveReq {
    string room = 1; // 聊天室ID
}

message LeaveRes {
}

message SendReq {
    string room = 1; // 聊天室ID
    string text = 2; // 消息内容
}

message SendRes {
}

message RecvReq {
    // 聊天室ID
    string room = 1;
    // 客户端记住的已经收取到的最后一条消息的序列号
    uint64 last_seq = 2;
    // 是否从最新的消息开始接收。这个选项只在客户端首次收取消息，也就是last_seq=0时，有效。
    // 为了防止漏掉消息，客户端下次收取必须从前一次收取到的消息的last_seq开始。
    bool offset_newest = 3;
}

message RecvRes {
    // 本次收取的所有未读消息，按seq排序，最小的seq必须比last_seq大
    repeated RoomMessage msgs = 1;
}

// 聊天室消息
message RoomMessage {
    // 消息类型
    enum Type {
        UNSPECIFIED = 0;
        ENTER_ROOM = 1; // 进入聊天室
        LEAVE_ROOM = 2; // 退出聊天室
        PLAIN_TEXT = 3; // 文本消息
    }

    // // 聊天室ID
    string room = 1;
    // 聊天室里的每条消息都有唯一的seq，新消息的seq总是更大
    uint64 seq = 2;
    // 消息类型
    Type type = 3;
    // 谁发出的消息
    string uid = 4;
    // 何时发出的消息（毫秒时间戳）
    int64 send_at = 5;

    // 具体消息对象，与消息类型对应
    MsgEnterRoom enter_room = 6;
    MsgLeaveRoom leave_room = 7;
    MsgPlainText plain_text = 8;
}

// 进入聊天室
message MsgEnterRoom {
    string name = 1; // 姓名
    string agent = 2; // 终端
    string avatar = 3; // 头像
    string ipaddr = 4; // IP地址
    string location = 5; // 位置
}

// 退出聊天室
message MsgLeaveRoom {
}

// 聊天室文本消息
message MsgPlainText {
    string text = 1; // 消息内容
}
