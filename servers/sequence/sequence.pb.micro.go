// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: sequence.proto

package sequence

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Sequence service

func NewSequenceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Sequence service

type SequenceService interface {
	// 对请求的序列号，加1之后返回
	Next(ctx context.Context, in *NextReq, opts ...client.CallOption) (*NextRes, error)
	// 对请求的序列号，返回已分配的最大值
	Max(ctx context.Context, in *MaxReq, opts ...client.CallOption) (*MaxRes, error)
}

type sequenceService struct {
	c    client.Client
	name string
}

func NewSequenceService(name string, c client.Client) SequenceService {
	return &sequenceService{
		c:    c,
		name: name,
	}
}

func (c *sequenceService) Next(ctx context.Context, in *NextReq, opts ...client.CallOption) (*NextRes, error) {
	req := c.c.NewRequest(c.name, "Sequence.Next", in)
	out := new(NextRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequenceService) Max(ctx context.Context, in *MaxReq, opts ...client.CallOption) (*MaxRes, error) {
	req := c.c.NewRequest(c.name, "Sequence.Max", in)
	out := new(MaxRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Sequence service

type SequenceHandler interface {
	// 对请求的序列号，加1之后返回
	Next(context.Context, *NextReq, *NextRes) error
	// 对请求的序列号，返回已分配的最大值
	Max(context.Context, *MaxReq, *MaxRes) error
}

func RegisterSequenceHandler(s server.Server, hdlr SequenceHandler, opts ...server.HandlerOption) error {
	type sequence interface {
		Next(ctx context.Context, in *NextReq, out *NextRes) error
		Max(ctx context.Context, in *MaxReq, out *MaxRes) error
	}
	type Sequence struct {
		sequence
	}
	h := &sequenceHandler{hdlr}
	return s.Handle(s.NewHandler(&Sequence{h}, opts...))
}

type sequenceHandler struct {
	SequenceHandler
}

func (h *sequenceHandler) Next(ctx context.Context, in *NextReq, out *NextRes) error {
	return h.SequenceHandler.Next(ctx, in, out)
}

func (h *sequenceHandler) Max(ctx context.Context, in *MaxReq, out *MaxRes) error {
	return h.SequenceHandler.Max(ctx, in, out)
}
