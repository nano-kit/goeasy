// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: liveuser.proto

package liveuser

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for User service

func NewUserEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for User service

type UserService interface {
	// 新增或更新自己的用户信息
	Set(ctx context.Context, in *SetUserInfoReq, opts ...client.CallOption) (*SetUserInfoRes, error)
	// 获取自己的用户信息
	Get(ctx context.Context, in *GetUserInfoReq, opts ...client.CallOption) (*GetUserInfoRes, error)
}

type userService struct {
	c    client.Client
	name string
}

func NewUserService(name string, c client.Client) UserService {
	return &userService{
		c:    c,
		name: name,
	}
}

func (c *userService) Set(ctx context.Context, in *SetUserInfoReq, opts ...client.CallOption) (*SetUserInfoRes, error) {
	req := c.c.NewRequest(c.name, "User.Set", in)
	out := new(SetUserInfoRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) Get(ctx context.Context, in *GetUserInfoReq, opts ...client.CallOption) (*GetUserInfoRes, error) {
	req := c.c.NewRequest(c.name, "User.Get", in)
	out := new(GetUserInfoRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for User service

type UserHandler interface {
	// 新增或更新自己的用户信息
	Set(context.Context, *SetUserInfoReq, *SetUserInfoRes) error
	// 获取自己的用户信息
	Get(context.Context, *GetUserInfoReq, *GetUserInfoRes) error
}

func RegisterUserHandler(s server.Server, hdlr UserHandler, opts ...server.HandlerOption) error {
	type user interface {
		Set(ctx context.Context, in *SetUserInfoReq, out *SetUserInfoRes) error
		Get(ctx context.Context, in *GetUserInfoReq, out *GetUserInfoRes) error
	}
	type User struct {
		user
	}
	h := &userHandler{hdlr}
	return s.Handle(s.NewHandler(&User{h}, opts...))
}

type userHandler struct {
	UserHandler
}

func (h *userHandler) Set(ctx context.Context, in *SetUserInfoReq, out *SetUserInfoRes) error {
	return h.UserHandler.Set(ctx, in, out)
}

func (h *userHandler) Get(ctx context.Context, in *GetUserInfoReq, out *GetUserInfoRes) error {
	return h.UserHandler.Get(ctx, in, out)
}

// Api Endpoints for Wx service

func NewWxEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Wx service

type WxService interface {
	// 客户端调用 wx.login() 获取临时登录凭证 code ，用此接口回传到开发者服务器。
	// 开发者服务器处理之后，返回开发者服务器的自定义登录态。
	// 关于自定义登录态的解释，可以参考 https://auth0.com/blog/refresh-tokens-what-are-they-and-when-to-use-them/
	Login(ctx context.Context, in *LoginReq, opts ...client.CallOption) (*LoginRes, error)
	// 开发者服务器的自定义登录态里的 access_token 到期之前，用此接口获取新的 access_token。
	RenewToken(ctx context.Context, in *RenewTokenReq, opts ...client.CallOption) (*RenewTokenRes, error)
	// 下单。调用该接口在微信支付服务后台生成预支付交易单，返回正确的预支付交易会话标识。
	Prepay(ctx context.Context, in *PrepayReq, opts ...client.CallOption) (*PrepayRes, error)
	// 支付通知。微信支付通过支付通知接口将用户支付成功消息通知给开发者服务器。
	Postpay(ctx context.Context, in *PostpayReq, opts ...client.CallOption) (*PostpayRes, error)
}

type wxService struct {
	c    client.Client
	name string
}

func NewWxService(name string, c client.Client) WxService {
	return &wxService{
		c:    c,
		name: name,
	}
}

func (c *wxService) Login(ctx context.Context, in *LoginReq, opts ...client.CallOption) (*LoginRes, error) {
	req := c.c.NewRequest(c.name, "Wx.Login", in)
	out := new(LoginRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wxService) RenewToken(ctx context.Context, in *RenewTokenReq, opts ...client.CallOption) (*RenewTokenRes, error) {
	req := c.c.NewRequest(c.name, "Wx.RenewToken", in)
	out := new(RenewTokenRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wxService) Prepay(ctx context.Context, in *PrepayReq, opts ...client.CallOption) (*PrepayRes, error) {
	req := c.c.NewRequest(c.name, "Wx.Prepay", in)
	out := new(PrepayRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wxService) Postpay(ctx context.Context, in *PostpayReq, opts ...client.CallOption) (*PostpayRes, error) {
	req := c.c.NewRequest(c.name, "Wx.Postpay", in)
	out := new(PostpayRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Wx service

type WxHandler interface {
	// 客户端调用 wx.login() 获取临时登录凭证 code ，用此接口回传到开发者服务器。
	// 开发者服务器处理之后，返回开发者服务器的自定义登录态。
	// 关于自定义登录态的解释，可以参考 https://auth0.com/blog/refresh-tokens-what-are-they-and-when-to-use-them/
	Login(context.Context, *LoginReq, *LoginRes) error
	// 开发者服务器的自定义登录态里的 access_token 到期之前，用此接口获取新的 access_token。
	RenewToken(context.Context, *RenewTokenReq, *RenewTokenRes) error
	// 下单。调用该接口在微信支付服务后台生成预支付交易单，返回正确的预支付交易会话标识。
	Prepay(context.Context, *PrepayReq, *PrepayRes) error
	// 支付通知。微信支付通过支付通知接口将用户支付成功消息通知给开发者服务器。
	Postpay(context.Context, *PostpayReq, *PostpayRes) error
}

func RegisterWxHandler(s server.Server, hdlr WxHandler, opts ...server.HandlerOption) error {
	type wx interface {
		Login(ctx context.Context, in *LoginReq, out *LoginRes) error
		RenewToken(ctx context.Context, in *RenewTokenReq, out *RenewTokenRes) error
		Prepay(ctx context.Context, in *PrepayReq, out *PrepayRes) error
		Postpay(ctx context.Context, in *PostpayReq, out *PostpayRes) error
	}
	type Wx struct {
		wx
	}
	h := &wxHandler{hdlr}
	return s.Handle(s.NewHandler(&Wx{h}, opts...))
}

type wxHandler struct {
	WxHandler
}

func (h *wxHandler) Login(ctx context.Context, in *LoginReq, out *LoginRes) error {
	return h.WxHandler.Login(ctx, in, out)
}

func (h *wxHandler) RenewToken(ctx context.Context, in *RenewTokenReq, out *RenewTokenRes) error {
	return h.WxHandler.RenewToken(ctx, in, out)
}

func (h *wxHandler) Prepay(ctx context.Context, in *PrepayReq, out *PrepayRes) error {
	return h.WxHandler.Prepay(ctx, in, out)
}

func (h *wxHandler) Postpay(ctx context.Context, in *PostpayReq, out *PostpayRes) error {
	return h.WxHandler.Postpay(ctx, in, out)
}

// Api Endpoints for Order service

func NewOrderEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Order service

type OrderService interface {
	// 创建订单
	Create(ctx context.Context, in *CreateOrderReq, opts ...client.CallOption) (*CreateOrderRes, error)
	// 提交订单
	Submit(ctx context.Context, in *SubmitOrderReq, opts ...client.CallOption) (*SubmitOrderRes, error)
	// 查询自己的订单
	List(ctx context.Context, in *ListOrderReq, opts ...client.CallOption) (*ListOrderRes, error)
}

type orderService struct {
	c    client.Client
	name string
}

func NewOrderService(name string, c client.Client) OrderService {
	return &orderService{
		c:    c,
		name: name,
	}
}

func (c *orderService) Create(ctx context.Context, in *CreateOrderReq, opts ...client.CallOption) (*CreateOrderRes, error) {
	req := c.c.NewRequest(c.name, "Order.Create", in)
	out := new(CreateOrderRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) Submit(ctx context.Context, in *SubmitOrderReq, opts ...client.CallOption) (*SubmitOrderRes, error) {
	req := c.c.NewRequest(c.name, "Order.Submit", in)
	out := new(SubmitOrderRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) List(ctx context.Context, in *ListOrderReq, opts ...client.CallOption) (*ListOrderRes, error) {
	req := c.c.NewRequest(c.name, "Order.List", in)
	out := new(ListOrderRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Order service

type OrderHandler interface {
	// 创建订单
	Create(context.Context, *CreateOrderReq, *CreateOrderRes) error
	// 提交订单
	Submit(context.Context, *SubmitOrderReq, *SubmitOrderRes) error
	// 查询自己的订单
	List(context.Context, *ListOrderReq, *ListOrderRes) error
}

func RegisterOrderHandler(s server.Server, hdlr OrderHandler, opts ...server.HandlerOption) error {
	type order interface {
		Create(ctx context.Context, in *CreateOrderReq, out *CreateOrderRes) error
		Submit(ctx context.Context, in *SubmitOrderReq, out *SubmitOrderRes) error
		List(ctx context.Context, in *ListOrderReq, out *ListOrderRes) error
	}
	type Order struct {
		order
	}
	h := &orderHandler{hdlr}
	return s.Handle(s.NewHandler(&Order{h}, opts...))
}

type orderHandler struct {
	OrderHandler
}

func (h *orderHandler) Create(ctx context.Context, in *CreateOrderReq, out *CreateOrderRes) error {
	return h.OrderHandler.Create(ctx, in, out)
}

func (h *orderHandler) Submit(ctx context.Context, in *SubmitOrderReq, out *SubmitOrderRes) error {
	return h.OrderHandler.Submit(ctx, in, out)
}

func (h *orderHandler) List(ctx context.Context, in *ListOrderReq, out *ListOrderRes) error {
	return h.OrderHandler.List(ctx, in, out)
}
