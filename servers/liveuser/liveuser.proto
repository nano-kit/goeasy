syntax = "proto3";

package liveuser;

service User {
    // 新增或更新自己的用户信息
    rpc Set(SetUserInfoReq) returns (SetUserInfoRes);
    // 获取自己的用户信息
    rpc Get(GetUserInfoReq) returns (GetUserInfoRes);
}

service Wx {
    // 客户端调用 wx.login() 获取临时登录凭证 code ，用此接口回传到开发者服务器。
    // 开发者服务器处理之后，返回开发者服务器的自定义登录态。
    // 关于自定义登录态的解释，可以参考 https://auth0.com/blog/refresh-tokens-what-are-they-and-when-to-use-them/
    rpc Login(LoginReq) returns (LoginRes);
    // 开发者服务器的自定义登录态里的 access_token 到期之前，用此接口获取新的 access_token。
    rpc RenewToken(RenewTokenReq) returns (RenewTokenRes);
    // 下单。调用该接口在微信支付服务后台生成预支付交易单，返回正确的预支付交易会话标识。
    rpc Prepay(PrepayReq) returns (PrepayRes);
    // 支付通知。微信支付通过支付通知接口将用户支付成功消息通知给开发者服务器。
    rpc Postpay(PostpayReq) returns (PostpayRes);
}

service Order {
    // 创建订单
    rpc Create(CreateOrderReq) returns (CreateOrderRes);
    // 查询自己的订单
    rpc List(ListOrderReq) returns (ListOrderRes);
}

message SetUserInfoReq {
    // 需要更新的用户信息。其中 uid, update_at 可以不填。
    UserRecord user = 1;
}

message SetUserInfoRes {
}

message GetUserInfoReq {
}

message GetUserInfoRes {
    UserRecord user = 1;
}

// UserRecord 是用户信息
message UserRecord {
    string uid = 1; // 唯一ID
    string name = 2; // 姓名
    string agent = 3; // 终端
    int64 update_at = 4; // 更新时间（毫秒时间戳）
    string avatar = 5; // 头像
}

message LoginReq {
    // 用户登录凭证（有效期五分钟）。开发者需要在开发者服务器后台调用 auth.code2Session，
    // 使用 code 换取 openid、unionid、session_key 等信息
    string code = 1;
}

message LoginRes {
    // 该用户调用开发者服务器后台的凭据，用来识别用户身份
    string access_token = 1;
    // 用来换取新的 access_token，客户端应该保存在本地存储
    string refresh_token = 2;
    // access_token 凭证到期的时间，格式为Unix时间戳
    int64 expiry = 3;
    // 用户的唯一ID
    string uid = 4;
}

message RenewTokenReq {
    // 客户端保存在本地存储的上次的 refresh_token
    string refresh_token = 1;
}

message RenewTokenRes {
    // 该用户调用开发者服务器后台的凭据，用来识别用户身份
    string access_token = 1;
    // 用来换取新的 access_token，客户端应该保存在本地存储。
    // 取决于是否开启了 Refresh Token Rotation，它可能与请求时的 refresh_token 不同
    string refresh_token = 2;
    // access_token 凭证到期的时间，格式为Unix时间戳
    int64 expiry = 3;
}

message PrepayReq {

}

message PrepayRes {

}

message PostpayReq {

}

message PostpayRes {

}

message CreateOrderReq {
    // 订单内包含的商品，只需要填 product_id 和 count
    repeated OrderProduct products = 1;
}

message CreateOrderRes {
    // 创建成功的订单
    OrderRecord order = 1;
}

message ListOrderReq {
    // 翻页游标：初始值是 0, 下次用服务端返回的 cursor. 当服务端返回 cursor 0 时，翻页结束。
    uint64 cursor = 1;
}

message ListOrderRes {
    // 订单列表
    repeated OrderRecord orders = 1;
    // 翻页游标：用于下次请求。
    uint64 cursor = 2;
}

// 订单内的商品
message OrderProduct {
    uint64 order_id = 1; // 订单编号
    string product_id = 2; // 商品 ID
    string name = 3; // 商品名称
    int32 price = 4; // 商品价格
    int32 count = 5; // 商品数量
    uint64 product_snapshot = 6; // 购买时刻的商品快照编号
    string detail = 7; // 购买时刻的商品详情（JSON格式）
}

// 一条订单
message OrderRecord {
    // 订单的状态枚举值
    enum State {
        CREATED = 0; // 刚创建
        PAID = 1;    // 已付费
    }

    uint64 id = 1; // 订单编号
    string uid = 2; // 下单的用户ID
    State state = 3; // 订单状态
    int32 amount = 4; // 商品总额（单位：分）
    int32 discount = 5; // 折扣（单位：分）
    int32 pay = 6; // 实付款（单位：分）
    int64 pay_at = 7; // 支付时间
    repeated OrderProduct products = 8; // 订单内的商品

    int64 created_at = 1002; // 下单时间
    int64 updated_at = 1003; // 订单状态更新时间
    int64 deleted_at = 1004; // 删除时间
}
