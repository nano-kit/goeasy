syntax = "proto3";

package liveuser;

service User {
    // 新增或更新用户信息
    rpc AddUser(AddUserReq) returns (AddUserRes);
    // 查询用户信息
    rpc QueryUser(QueryUserReq) returns (QueryUserRes);
}

service Wx {
    // 客户端调用 wx.login() 获取临时登录凭证 code ，用此接口回传到开发者服务器。
    // 开发者服务器处理之后，返回开发者服务器的自定义登录态。
    // 关于自定义登录态的解释，可以参考 https://auth0.com/blog/refresh-tokens-what-are-they-and-when-to-use-them/
    rpc Login(LoginReq) returns (LoginRes);
    // 开发者服务器的自定义登录态里的 access_token 到期之前，用此接口获取新的 access_token。
    rpc RenewToken(RenewTokenReq) returns (RenewTokenRes);
}

message AddUserReq {
    UserRecord user = 1;
}

message AddUserRes {
}

message QueryUserReq {
    repeated string uids = 1;
}

message QueryUserRes {
    repeated UserRecord users = 1;
}

// UserRecord 是用户信息
message UserRecord {
    string uid = 1; // 唯一ID
    string name = 2; // 姓名
    string agent = 3; // 终端
    string update_at = 4; // 更新时间(秒)
    string avatar = 5; // 头像
}

message LoginReq {
    // 用户登录凭证（有效期五分钟）。开发者需要在开发者服务器后台调用 auth.code2Session，
    // 使用 code 换取 openid、unionid、session_key 等信息
    string code = 1;
}

message LoginRes {
    // 该用户调用开发者服务器后台的凭据，用来识别用户身份
    string access_token = 1;
    // 用来换取新的 access_token，客户端应该保存在本地存储
	string refresh_token = 2;
    // access_token 凭证到期的时间，格式为Unix时间戳
	int64 expiry = 3;
}

message RenewTokenReq {
    // 客户端保存在本地存储的上次的 refresh_token
    string refresh_token = 1;
}

message RenewTokenRes {
    // 该用户调用开发者服务器后台的凭据，用来识别用户身份
    string access_token = 1;
    // 用来换取新的 access_token，客户端应该保存在本地存储。
    // 取决于是否开启了 Refresh Token Rotation，它可能与请求时的 refresh_token 不同
	string refresh_token = 2;
    // access_token 凭证到期的时间，格式为Unix时间戳
	int64 expiry = 3;
}
