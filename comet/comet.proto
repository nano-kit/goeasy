syntax = "proto3";

package comet;

// Comet is a landing place where clients are continuously subscribing for downlink messages
// by a websocket or grpc connection.
service Comet {
    // Subscribe for downlink messages while also sending uplink messages.
    rpc Subscribe(stream Uplink) returns (stream Downlink);
    // Publish an event to a specific client who is landing on this comet instance.
    // Publish or Broadcast is not reliable innately! The event may not reach the client in
    // case of comet restarts or broken connection. So it is not necessary to retry automatically.
    // Usually you should design a SYNC protocol between client and server to achieve the
    // reliable broadcasting.
    rpc Publish(PublishReq) returns (PublishRes);
    // Broadcast an event to all the clients in a specific room on this comet instance.
    rpc Broadcast(BroadcastReq) returns (BroadcastRes);
    // Dump all the clients' session on this comet instance.
    rpc DumpSession(DumpSessionReq) returns (DumpSessionRes);
}

message PublishReq {
    // The unique user identity.
    // Please note if an end-user has multiple terminals such as a phone, a pad, and a desktop,
    // every terminal should use a unique identity if these devices are treated differently.
    string uid = 1;
    // The server-sent event goes through the downlink to the client.
    // Its content is opaque, which means what is published here reaches client unmodified.
    // Only the concrete business can explain this event.
    string evt = 2;
}

message PublishRes {
}

message BroadcastReq {
    // room identity, default (empty) to do a world broadcast, which means all the clients on
    // this comet instance are published with the event.
    string rid = 1;
    // refer to PublishReq.evt
    string evt = 2;
}

message BroadcastRes {
}

message DumpSessionReq {
}

message DumpSessionRes {
    repeated Session world = 1;
    repeated Room rooms = 2;
}

message Room {
    string rid = 1;
    repeated Session room = 2;
}

message Session {
    string uid = 1;
    string rid = 2;
    string birth = 3;
}

message Uplink {
    // t is used to differentiate what this uplink message is
    MsgType t = 1;
    Heartbeat hb = 2;
    Auth auth = 3;
    JoinRoom join = 4;
}

message Downlink {
    // t is used to differentiate what this downlink message is
    MsgType t = 1;
    Heartbeat hb = 2;
    ServerPush push = 3;
}

enum MsgType {
    // Heartbeat is sent on downlink and uplink, to keep the persistent connection alive
    HB = 0;
    // Auth is sent on uplink as the first message for Comet.Subscribe
    AUTH = 1;
    // JoinRoom is sent on uplink to join the specified room
    JOIN = 2;
    // ServerPush is sent on downlink to push event to client
    PUSH = 3;
}

message Heartbeat {
}

message Auth {
    // Usually a JWT is used. Comet.Subscribe extracts user's account information from this token.
    string token = 1;
}

message JoinRoom {
    // room identity, default (empty) to quit any room and stay only in the world.
    string rid = 1;
}

message ServerPush {
    // refer to PublishReq.evt
    string evt = 1;
}

// Event is the asynchronous message using Go-Micro's message broker interface.
// refer to Comet.onEvent
message Event {
    // refer to PublishReq.uid
    string uid = 1;
    // refer to BroadcastReq.rid
    string rid = 2;
    // refer to PublishReq.evt
    string evt = 3;
}
