syntax = "proto3";

package comet;

// Comet is a landing place where clients are continuously subscribing for downlink messages
// by a websocket or grpc connection.
service Comet {
    // Subscribe for downlink messages while also sending uplink messages.
    rpc Subscribe(stream Uplink) returns (stream Downlink);
    // Publish an event to a specific client who is landing on this comet instance.
    // Publish or Broadcast is not reliable innately! The event may not reach the client in
    // case of comet restarts or broken connection. So it is not necessary to retry automatically.
    // Usually you should design a SYNC protocol between client and server to achieve the
    // reliable broadcasting.
    rpc Publish(PublishReq) returns (PublishRes);
    // Broadcast an event to all the clients in a specific room on this comet instance.
    rpc Broadcast(BroadcastReq) returns (BroadcastRes);
    // Dump all the clients' session on this comet instance. It is a debugging method.
    rpc DumpSession(DumpSessionReq) returns (DumpSessionRes);
}

message PublishReq {
    // The unique user identity.
    // Please note if an end-user has multiple terminals such as a phone, a pad, and a desktop,
    // every terminal should use a unique identity if these devices are treated differently.
    string uid = 1;
    // The server-sent event goes through the downlink to the client.
    // Its content is opaque, which means what is published here reaches client unmodified.
    // Only the concrete business can explain this event.
    string evt = 2;
}

message PublishRes {
}

message BroadcastReq {
    // The room identity, default (empty) to do a world broadcast, which means all the clients on
    // this comet instance are published with the event. Otherwise, the broadcast is delivered to
    // the clients within the room.
    string rid = 1;
    // The server-sent event goes through the downlink to the client.
    // Its content is opaque, which means what is published here reaches client unmodified.
    // Only the concrete business can explain this event.
    string evt = 2;
}

message BroadcastRes {
}

message DumpSessionReq {
}

message DumpSessionRes {
    // All the sessions in the world in this comet instance
    repeated Session world = 1;
    // All the rooms in this comet instance
    repeated Room rooms = 2;
}

// Room is a (virtual) place where session gathers.
message Room {
    // The room identity
    string rid = 1;
    // All the sessions in this room.
    repeated Session room = 2;
}

// Session is a user's session. It is created when a client subscribes to this comet, and
// destroyed when the client disconnected.
message Session {
    // The unique user identity
    string uid = 1;
    // The room identity
    string rid = 2;
    // When is the session created
    string birth = 3;
}

message Uplink {
    // type is used to differentiate what this uplink message is
    Packet type = 1;
    Heartbeat hb = 2;
    Auth auth = 3;
    JoinRoom join = 4;
}

message Downlink {
    // type is used to differentiate what this downlink message is
    Packet type = 1;
    Heartbeat hb = 2;
    ServerPush push = 3;
}

// The type of packet that is transferring on the wire of uplink and downlink
enum Packet {
    // Heartbeat is sent on downlink and uplink, to keep the persistent connection alive
    HB = 0;
    // Auth is sent on uplink as the first message for Comet.Subscribe
    AUTH = 1;
    // JoinRoom is sent on uplink to join the specified room. JOIN can be sent together with AUTH,
    // which means connect to comet and join the specified room immediately. A client follows
    // only one room at a time. If a client is already in a room, JOIN a different room implies
    // quitting the last room where the client stays; JOIN the same room is a no-op. A connected
    // client is always considered in the world in spite of maybe in a room.
    JOIN = 2;
    // ServerPush is sent on downlink to push event to client
    PUSH = 3;
}

message Heartbeat {
}

message Auth {
    // Usually a JWT is used. Comet.Subscribe extracts user's account information from this token.
    string token = 1;
}

message JoinRoom {
    // The room identity, default (empty) to quit any room and stay only in the world.
    string rid = 1;
}

message ServerPush {
    // The server-sent event goes through the downlink to the client.
    // Its content is opaque, which means what is published reaches client unmodified.
    // Only the concrete business can explain this event.
    string evt = 1;
}

// Event is the asynchronous message using Go-Micro's message broker interface.
// refer to Comet.onEvent
message Event {
    // The unique user identity
    string uid = 1;
    // The room identity
    string rid = 2;
    // The server-sent event goes through the downlink to the client.
    string evt = 3;
}

// Message is the general content predefined by comet for server-sent event.
// It is stringified to JSON and then assigned to `string evt`.
message Message {
    // A optional string identifying the server that generates event.
    string server = 1;
    // A string identifying the type of event.
    string event = 2;
    // The data field for the message.
    string data = 3;
    // The event ID.
    string id = 4;
}
