// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: comet.proto

package comet

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Comet service

func NewCometEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Comet service

type CometService interface {
	Publish(ctx context.Context, in *PublishReq, opts ...client.CallOption) (*PublishRes, error)
	Subscribe(ctx context.Context, opts ...client.CallOption) (Comet_SubscribeService, error)
}

type cometService struct {
	c    client.Client
	name string
}

func NewCometService(name string, c client.Client) CometService {
	return &cometService{
		c:    c,
		name: name,
	}
}

func (c *cometService) Publish(ctx context.Context, in *PublishReq, opts ...client.CallOption) (*PublishRes, error) {
	req := c.c.NewRequest(c.name, "Comet.Publish", in)
	out := new(PublishRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cometService) Subscribe(ctx context.Context, opts ...client.CallOption) (Comet_SubscribeService, error) {
	req := c.c.NewRequest(c.name, "Comet.Subscribe", &Uplink{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &cometServiceSubscribe{stream}, nil
}

type Comet_SubscribeService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Uplink) error
	Recv() (*Downlink, error)
}

type cometServiceSubscribe struct {
	stream client.Stream
}

func (x *cometServiceSubscribe) Close() error {
	return x.stream.Close()
}

func (x *cometServiceSubscribe) Context() context.Context {
	return x.stream.Context()
}

func (x *cometServiceSubscribe) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *cometServiceSubscribe) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *cometServiceSubscribe) Send(m *Uplink) error {
	return x.stream.Send(m)
}

func (x *cometServiceSubscribe) Recv() (*Downlink, error) {
	m := new(Downlink)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Comet service

type CometHandler interface {
	Publish(context.Context, *PublishReq, *PublishRes) error
	Subscribe(context.Context, Comet_SubscribeStream) error
}

func RegisterCometHandler(s server.Server, hdlr CometHandler, opts ...server.HandlerOption) error {
	type comet interface {
		Publish(ctx context.Context, in *PublishReq, out *PublishRes) error
		Subscribe(ctx context.Context, stream server.Stream) error
	}
	type Comet struct {
		comet
	}
	h := &cometHandler{hdlr}
	return s.Handle(s.NewHandler(&Comet{h}, opts...))
}

type cometHandler struct {
	CometHandler
}

func (h *cometHandler) Publish(ctx context.Context, in *PublishReq, out *PublishRes) error {
	return h.CometHandler.Publish(ctx, in, out)
}

func (h *cometHandler) Subscribe(ctx context.Context, stream server.Stream) error {
	return h.CometHandler.Subscribe(ctx, &cometSubscribeStream{stream})
}

type Comet_SubscribeStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Downlink) error
	Recv() (*Uplink, error)
}

type cometSubscribeStream struct {
	stream server.Stream
}

func (x *cometSubscribeStream) Close() error {
	return x.stream.Close()
}

func (x *cometSubscribeStream) Context() context.Context {
	return x.stream.Context()
}

func (x *cometSubscribeStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *cometSubscribeStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *cometSubscribeStream) Send(m *Downlink) error {
	return x.stream.Send(m)
}

func (x *cometSubscribeStream) Recv() (*Uplink, error) {
	m := new(Uplink)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}
